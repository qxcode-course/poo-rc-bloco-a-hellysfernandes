{
    "patches": [
        {
            "label": "2025-09-17_14-17-26",
            "content": "@@ -1,261 +0,0 @@\n-class Towel:%0A    def __init__(self):%0A        self.color: str = %22%22%0A        self.size: str = %22%22%0A        self.wetness: int = 0%0A%0Ahellys = Towel()%0Ahellys.color = %22preta%22%0Ahellys.size = %22g%22%0A%0Amiguel = Towel()%0Amiguel.color = %22roxo%22%0Amiguel.size = %22p%22%0A%0Aprint(miguel.color)\n",
            "lines": "0"
        },
        {
            "label": "2025-09-17_14-41-26",
            "content": "@@ -258,125 +258,4 @@\n lor)\n-%0A%0Aprint(%22qual a cor da sua toalha%22)%0Acolor = input()%0Atowel: Towel = Towel(color, %22p%22)%0Aprint(%22sua toalha %C3%A9 %7Btowel.color%7D %22)\n",
            "lines": "15"
        },
        {
            "label": "2025-09-17_14-46-06",
            "content": "@@ -31,46 +31,10 @@\n self\n-, color: str, size: str): # construtor\n+):\n %0A   \n@@ -60,25 +60,10 @@\n r = \n-color # atributos\n+%22%22\n %0A   \n@@ -84,20 +84,18 @@\n : str = \n-size\n+%22%22\n %0A       \n@@ -121,1558 +121,262 @@\n = 0%0A\n-    %0A    def dry(self, amount: int) -%3E None:%0A        self.wetnes\n+%0Ahelly\n s \n-+\n = \n-amount%0A        if self.wetness %3E= self.isMaxWetness():%0A            self.wetness = self.isMaxWetness()%0A            print(%22toalha encharcada%22)%0A%0A    def isDry(self):%0A        return self.wetness == 0%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def isMaxWetness(self) -%3E int:%0A        if self.size == %22P%22: # early return%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if s\n+Towel()%0Ahellys.color = %22preta%22%0Ahellys.size = %22g%22%0A%0Amiguel = Towel()%0Amiguel.color = %22roxo%22%0Amigu\n el\n-f\n .size =\n-=\n  %22\n-G%22:%0A            return 30%0A        return 0 # default return%0A%0A    def __str__(self) -%3E str: # toString%0A        return f%22Cor: %7Bs\n+p%22%0A%0Aprint(migu\n el\n-f\n .color\n-%7D, Tamanho: %7Bself.size%7D, Umidade: %7Bself.wetness%7D%22%0A%0Adef main(): %0A    towel: Towel = Towel(%22%22, %22%22) # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito%0A%0A        line: str = input() # 4: perguntar ao usuario%0A        print(%22$%22 + line) # echo%0A        args: list%5Bstr%5D\n+)%0A%0Aprint(%22qual a cor da sua toalha%22)%0Acolor\n  = \n-l\n in\n-e.split(%22 %22) # 5: separar argumentos%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22criar%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A        elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A        elif args%5B0%5D == %22torcer%22:%0A            towel.wringOut()%0A        elif args%5B0%5D == %22enxugar%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A        else: # 7: erro%0A            print(%22fail: comando n%C3%A3o encontrado%22)%0A%0Amain() # passo 1\n+put()%0Atowel: Towel = Towel(color, %22p%22)%0Aprint(%22sua toalha %C3%A9 %7Btowel.color%7D %22)\n",
            "lines": "20"
        },
        {
            "label": "2025-09-26_20-48-52",
            "content": "class Towel:\n    def __init__(self, color: str, size: str): # construtor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha encharcada\")\n\n    def isDry(self):\n        return self.wetness == 0\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\": # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0 # default return\n\n    def __str__(self) -> str: # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\ndef main(): \n    towel: Towel = Towel(\"\", \"\") # 2: criar um obj com qq valor inicial\n    while True: # 3: loop infinito\n\n        line: str = input() # 4: perguntar ao usuario\n        print(\"$\" + line) # echo\n        args: list[str] = line.split(\" \") # 5: separar argumentos\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\": # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"mostrar\":\n            print(towel)\n        else: # 7: erro\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain() # passo 1",
            "lines": "57"
        }
    ]
}